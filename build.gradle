buildscript {
    dependencies {
        classpath 'com.palantir:gradle-baseline-java:0.11.1'
        // classpath 'com.palantir.sls-packaging:gradle-sls-packaging:2.0.0'
        classpath 'gradle.plugin.com.palantir.configurationresolver:gradle-configuration-resolver-plugin:0.2.0'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.9'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.5.3'
    id 'org.inferred.processors' version '1.2.3'
    id 'org.unbroken-dome.test-sets' version '1.3.2'
    id 'nebula.lint' version '6.8.0'
}

apply plugin: 'com.palantir.baseline-idea'

allprojects {
    apply plugin: 'com.palantir.configuration-resolver'
    apply plugin: 'com.palantir.git-version'

    group 'io.github.iamdanfox'

    repositories {
        jcenter()
    }

    version gitVersion()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-idea'
    apply plugin: 'net.ltgt.errorprone'

    task setupSourceDirs() {
        doLast {
            def packageName = rootProject.group.replace(".", "/")
            sourceSets.forEach {sourceSet ->
                file("src/${sourceSet.name}/java/${packageName}").mkdirs()
                file("src/${sourceSet.name}/resources/${packageName}").mkdirs()
            }
        }
    }

    tasks.eclipse.dependsOn setupSourceDirs
    tasks.idea.dependsOn setupSourceDirs

    sourceCompatibility = '1.8'

    configurations.all {
        // exclude module: 'jackson-datatype-jdk7'
        resolutionStrategy {
            // failOnVersionConflict()
            //
            // force(
            //     'com.google.guava:guava:21.0',
            //     'org.slf4j:slf4j-api:1.7.24',
            //     'com.palantir.tokens:auth-tokens:1.0.1',
            //     'com.squareup.okhttp3:okhttp:3.4.1',
            //     'org.apache.commons:commons-lang3:3.4',
            //     'org.objenesis:objenesis:2.5',
            //     'junit:junit:4.12'
            // )

            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                    details.useVersion '2.7.4'
                }
            }
        }
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.0.15'
    }

    if (!System.env.CI) {
        apply plugin: 'nebula.lint'
        gradleLint.rules = ['unused-dependency', 'unused-exclude']
    }
}
